// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package at.co.federmann.gtd.web;

import at.co.federmann.gtd.domain.Goal;
import at.co.federmann.gtd.domain.GtdAction;
import at.co.federmann.gtd.domain.Priority;
import at.co.federmann.gtd.domain.Status;
import at.co.federmann.gtd.web.GtdActionController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect GtdActionController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String GtdActionController.create(@Valid GtdAction gtdAction, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, gtdAction);
            return "gtdactions/create";
        }
        uiModel.asMap().clear();
        gtdAction.persist();
        return "redirect:/gtdactions/" + encodeUrlPathSegment(gtdAction.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String GtdActionController.createForm(Model uiModel) {
        populateEditForm(uiModel, new GtdAction());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (Goal.countGoals() == 0) {
            dependencies.add(new String[] { "goal", "goals" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "gtdactions/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String GtdActionController.show(@PathVariable("id") String id, Model uiModel) {
        uiModel.addAttribute("gtdaction", GtdAction.findGtdAction(id));
        uiModel.addAttribute("itemId", id);
        return "gtdactions/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String GtdActionController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("gtdactions", GtdAction.findGtdActionEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) GtdAction.countGtdActions() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("gtdactions", GtdAction.findAllGtdActions(sortFieldName, sortOrder));
        }
        return "gtdactions/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String GtdActionController.update(@Valid GtdAction gtdAction, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, gtdAction);
            return "gtdactions/update";
        }
        uiModel.asMap().clear();
        gtdAction.merge();
        return "redirect:/gtdactions/" + encodeUrlPathSegment(gtdAction.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String GtdActionController.updateForm(@PathVariable("id") String id, Model uiModel) {
        populateEditForm(uiModel, GtdAction.findGtdAction(id));
        return "gtdactions/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String GtdActionController.delete(@PathVariable("id") String id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        GtdAction gtdAction = GtdAction.findGtdAction(id);
        gtdAction.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/gtdactions";
    }
    
    void GtdActionController.populateEditForm(Model uiModel, GtdAction gtdAction) {
        uiModel.addAttribute("gtdAction", gtdAction);
        uiModel.addAttribute("goals", Goal.findAllGoals());
        uiModel.addAttribute("prioritys", Arrays.asList(Priority.values()));
        uiModel.addAttribute("statuses", Arrays.asList(Status.values()));
    }
    
    String GtdActionController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
